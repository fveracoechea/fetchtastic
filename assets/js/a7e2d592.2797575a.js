"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62],{635:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=n(6106),r=n(9252);const i={title:"Core Concepts"},a=void 0,o={id:"core-concepts",title:"Core Concepts",description:"This section covers the essential building blocks of Fetchtastic, including",source:"@site/docs/core-concepts.mdx",sourceDirName:".",slug:"/core-concepts",permalink:"/fetchtastic/docs/core-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts.mdx",tags:[],version:"current",frontMatter:{title:"Core Concepts"},sidebar:"docSidebar",previous:{title:"Getting Started",permalink:"/fetchtastic/docs/getting-started"},next:{title:"Usage Guide",permalink:"/fetchtastic/docs/usage-guide"}},c={},l=[{value:"Fluent Interface Design",id:"fluent-interface-design",level:2},{value:"Request configuration",id:"request-configuration",level:2},{value:"Headers",id:"headers",level:4},{value:"AbortController",id:"abortcontroller",level:4},{value:"URL and Search Parameters",id:"url-and-search-parameters",level:4},{value:"Request Body",id:"request-body",level:4},{value:"Other Options",id:"other-options",level:4},{value:"HTTP methods",id:"http-methods",level:2},{value:"Error Catchers",id:"error-catchers",level:2},{value:"Key Points",id:"key-points",level:3},{value:"Automatic Error Handling",id:"automatic-error-handling",level:4},{value:"Custom Error Catchers",id:"custom-error-catchers",level:4},{value:"Fallback Handling:",id:"fallback-handling",level:4},{value:"Response methods",id:"response-methods",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"This section covers the essential building blocks of Fetchtastic, including\nRequest Configuration, Http Methods, Response Methods, and Error Catchers."}),"\n",(0,t.jsx)(s.p,{children:"You'll learn how to configure your network requests to ensure they are\npredictable and type-safe, explore the various methods available for handling\nresponses, and understand how to effectively catch and manage errors."}),"\n",(0,t.jsx)(s.h2,{id:"fluent-interface-design",children:"Fluent Interface Design"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Fetchtastic"})," combines its features through a fluent interface API design,\nenabling you to chain methods together in a clear and concise manner. This\ndesign allows you to configure your requests step-by-step, with each method call\nreturning the modified instance, making it easy to build and customize requests\nwithout needing separate setup steps."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"const posts = await fetchtastic('https://jsonplaceholder.typicode.com')\n  .get('/posts')\n  .setSearchParams({ page: 1, first: 12 })\n  .appendHeader('Content-Type', 'application/json')\n  .notFound(() => Response.json({ message: 'Record not found' }))\n  .json();\n"})}),"\n",(0,t.jsx)(s.h2,{id:"request-configuration",children:"Request configuration"}),"\n",(0,t.jsxs)(s.p,{children:["in ",(0,t.jsx)(s.strong,{children:"Fetchtastic"}),", it refers to the set of options and methods available to\ncustomize a network request to your specific needs. By using these configuration\noptions, you can control various aspects of how a request is made, ensuring that\nit meets the requirements of your application while maintaining predictability\nand type safety."]}),"\n",(0,t.jsx)(s.p,{children:"Here\u2019s a breakdown of what you can configure:"}),"\n",(0,t.jsx)(s.h4,{id:"headers",children:"Headers"}),"\n",(0,t.jsx)(s.p,{children:"Specify custom headers to be included with your request, such as authorization\ntokens, content types, or any other metadata necessary for the server to process\nthe request correctly."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#setheaders",children:"setHeaders"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#appendheader",children:"appendHeader"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#deleteheader",children:"deleteHeader"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"abortcontroller",children:"AbortController"}),"\n",(0,t.jsxs)(s.p,{children:["Integrate an\n",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortController",children:"AbortController"}),"\nto manage the cancellation of requests. This is particularly useful for aborting\nongoing requests when they are no longer needed, preventing unnecessary resource\nusage."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#controller",children:"controller"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"url-and-search-parameters",children:"URL and Search Parameters"}),"\n",(0,t.jsx)(s.p,{children:"Define the specific path of the URL to which the request will be sent. This\nallows you to target different endpoints within the same domain."}),"\n",(0,t.jsx)(s.p,{children:"As well add query parameters to the URL to pass additional data or filter\nresults. These parameters can be easily appended to the URL, enabling you to\nmodify the request without altering the main URL path."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#url-1",children:"url"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#setsearchparams",children:"setSearchParams"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#appendsearchparam",children:"appendSearchParam"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#deletesearchparam",children:"deleteSearchParam"})}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"Request's url can also be extended using Http method functions."})}),"\n",(0,t.jsx)(s.h4,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsxs)(s.p,{children:["For methods like POST, PUT, or PATCH, configure the request body to include the\ndata you want to send to the server. Fetchtastic ensures that the body is\nproperly JSON stringified when content-type ",(0,t.jsx)(s.code,{children:"application/json"})," has been\nspecified in the headers."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#setbody",children:"setBody"})}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"Request's body can also be set on some Http method functions."})}),"\n",(0,t.jsx)(s.h4,{id:"other-options",children:"Other Options"}),"\n",(0,t.jsx)(s.p,{children:"Beyond these, you can configure additional options such as credentials, referrer\npolicy, mode (e.g., cors, same-origin), and more, to fine-tune the behavior of\nyour request to suit specific scenarios."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#setoptions",children:"setOptions"})}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"http-methods",children:"HTTP methods"}),"\n",(0,t.jsx)(s.p,{children:"These functions when called, set a specific HTTP method to the request\nconfiguration. Likewise, you can pass optional url and body arguments to these\nmethods if needed."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#get",children:"get"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#post",children:"post"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#put",children:"put"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#delete",children:"delete"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#options",children:"options"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#patch",children:"patch"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#head",children:"head"})}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"error-catchers",children:"Error Catchers"}),"\n",(0,t.jsx)(s.p,{children:"They play a crucial role in managing and handling responses that aren't\nsuccessful (those that return HTTP error codes like 404 or 500)."}),"\n",(0,t.jsxs)(s.p,{children:["Unlike the standard fetch API, which requires manual checking of response\nstatuses, Fetchtastic automatically throws an error for any\n",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response/ok",children:"non-OK"})," responses\nunless you've provided an error catcher to handle it."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#onerror",children:" onError "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#badrequest",children:" badRequest "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#unauthorized",children:" unauthorized "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#forbidden",children:" forbidden "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#notfound",children:" notFound "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#timeout",children:" timeout "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#servererror",children:" serverError "})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"key-points",children:"Key Points"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Error catchers are registered once and shared across instances."}),"\n",(0,t.jsx)(s.li,{children:"The original request is passed along with the error, allowing for the creation\nof reusable error handling functions."}),"\n",(0,t.jsx)(s.li,{children:"Error catchers can be overwritten for specific instances as needed."}),"\n",(0,t.jsx)(s.li,{children:"Catchers are optional, but if none are provided an error will still be thrown\nfor http error codes and it will be up to you to catch it."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Here\u2019s how Error Catchers work:"}),"\n",(0,t.jsx)(s.h4,{id:"automatic-error-handling",children:"Automatic Error Handling"}),"\n",(0,t.jsxs)(s.p,{children:["By default, Fetchtastic throws an\n",(0,t.jsx)(s.a,{href:"/docs/api/classes/ResponseError",children:"ResponseError"})," when it encounters an HTTP\nresponse with a status code that isn\u2019t in the 200\u2013299 range. This ensures that\nyou don\u2019t accidentally overlook failed requests, making error handling a more\nexplicit and intentional part of your code."]}),"\n",(0,t.jsx)(s.h4,{id:"custom-error-catchers",children:"Custom Error Catchers"}),"\n",(0,t.jsx)(s.p,{children:"If you want more control over how errors are handled, you can provide a custom\nerror catcher. This is a function that allows you to intercept these errors in a\nmore declarative approach and decide what to do with them. For example, you\nmight want to display a user-friendly message, log the error for further\nanalysis, or retry the request under certain conditions."}),"\n",(0,t.jsx)(s.h4,{id:"fallback-handling",children:"Fallback Handling:"}),"\n",(0,t.jsx)(s.p,{children:"Error catchers can also act as a safety net, ensuring that unexpected errors\ndon\u2019t break your application. By catching and managing these errors, you can\nmaintain a smooth user experience even when things go wrong."}),"\n",(0,t.jsx)(s.h2,{id:"response-methods",children:"Response methods"}),"\n",(0,t.jsx)(s.p,{children:"These functions when called, execute the HTTP request and return a promise with\nits response."}),"\n",(0,t.jsx)(s.p,{children:"The primary objectives of these functions involve initiating the HTTP request\nwith the existing configuration, with a focus on managing responses, and parsing\nthe resulting data."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#resolve",children:" resolve "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#json",children:" json "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#arraybuffer",children:" arrayBuffer "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#blob",children:" blob "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#formdata",children:" formData "})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/docs/api/classes/Fetchtastic#text",children:" text "})}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9252:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(7378);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);