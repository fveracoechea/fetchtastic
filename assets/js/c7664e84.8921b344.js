"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[56],{7155:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>o});var s=t(6106),r=t(9252);const c={sidebar_position:3},i=void 0,d={id:"reference/types",title:"types",description:"HttpMethod",source:"@site/docs/reference/types.mdx",sourceDirName:"reference",slug:"/reference/types",permalink:"/fetchtastic/docs/reference/types",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/types.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Response Error",permalink:"/fetchtastic/docs/reference/response-error"},next:{title:"Utilities",permalink:"/fetchtastic/docs/reference/utilities"}},a={},o=[{value:"HttpMethod",id:"httpmethod",level:2},{value:"ResponseParser",id:"responseparser",level:2},{value:"SearchParamInput",id:"searchparaminput",level:2},{value:"FetchtasticOptions",id:"fetchtasticoptions",level:2},{value:"FetchOptions",id:"fetchoptions",level:2},{value:"FetchRequestHeader",id:"fetchrequestheader",level:2},{value:"DataAssertionFn",id:"dataassertionfn",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"httpmethod",children:"HttpMethod"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"HttpMethod"})," is a type alias that represents a single HTTP method, It includes\nthe following methods:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"OPTIONS"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"GET"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"HEAD"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"PUT"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"POST"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"DELETE"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"PATCH"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { HttpMethod } from 'fetchtastic';\n\nconst method: HttpMethod = 'GET';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"responseparser",children:"ResponseParser"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ResponseParser"})," is a type alias that represents a single response type, It\nincludes the following parsers:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ArrayBuffer"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Blob"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"FormData"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"JSON"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Text"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { ResponseParser } from 'fetchtastic';\n\nconst parser: ResponseParser = 'JSON';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"searchparaminput",children:"SearchParamInput"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"SearchParamInput"})," is a type alias that represents the different types of inputs\nthat can be used for a search parameter. It can be one of the following types:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"string"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"URLSearchParams"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"[string, string | boolean | number][]"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Record<string, string | boolean | number>"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { SearchParamInput } from 'fetchtastic';\n\nconst input1: SearchParamInput = 'key=value';\nconst input2: SearchParamInput = new URLSearchParams('key1=value1&key2=value2');\nconst input3: SearchParamInput = [\n  ['key', 'value'],\n  ['key2', true],\n];\nconst input4: SearchParamInput = { key: 'value', key2: 123 };\n"})}),"\n",(0,s.jsx)(n.h2,{id:"fetchtasticoptions",children:"FetchtasticOptions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FetchtasticOptions"})," is a type alias that represents the options that can be\npassed to the ",(0,s.jsx)(n.code,{children:"fetch"})," function. It is defined as:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type FetchtasticOptions = Omit<RequestInit, 'signal' | 'method'>;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["That means it includes all of the options from ",(0,s.jsx)(n.code,{children:"RequestInit"})," except for ",(0,s.jsx)(n.code,{children:"signal"}),"\nand ",(0,s.jsx)(n.code,{children:"method"})]}),"\n",(0,s.jsx)(n.h2,{id:"fetchoptions",children:"FetchOptions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FetchOptions"})," is a type alias that extends ",(0,s.jsx)(n.code,{children:"RequestInit"})," and includes the\n",(0,s.jsx)(n.code,{children:"method"})," property, which specifies the HTTP method to use for the request."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { FetchOptions } from 'fetchtastic';\n\nconst options: FetchOptions = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({ key: 'value' }),\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"fetchrequestheader",children:"FetchRequestHeader"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FetchRequestHeader"})," is a type alias that represents the different types of\nheaders that are most commonly included in a ",(0,s.jsx)(n.code,{children:"fetch"})," request. It includes the\nfollowing headers:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Accept"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Content-Type"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Authorization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"User-Agent"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Referer"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Cache-Control"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Accept-Encoding"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Origin"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Connection"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Cookie"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Pragma"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"If-Modified-Since"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { FetchRequestHeader } from 'fetchtastic';\n\nconst header: FetchRequestHeader = 'Accept';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dataassertionfn",children:"DataAssertionFn"}),"\n",(0,s.jsxs)(n.p,{children:["A function type that asserts and transforms data. It takes an ",(0,s.jsx)(n.code,{children:"unknown"})," data\nparameter and returns a transformed value of type ",(0,s.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { DataAssertionFn } from 'fetchtastic';\n\nconst assertData: DataAssertionFn<number> = data => {\n  if (typeof data === 'number') {\n    return data * 2;\n  }\n  return 0;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This type can be used to define a function that validates the response data\nreturned by a ",(0,s.jsx)(n.code,{children:"fetch"})," request, for example by checking that it matches a\nparticular interface or schema."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},9252:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var s=t(7378);const r={},c=s.createContext(r);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);