"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[284],{544:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>a});var n=s(6106),i=s(9252);const c={},o="Utilities",r={id:"reference/utilities",title:"Utilities",description:"isHttpMethod",source:"@site/docs/reference/utilities.mdx",sourceDirName:"reference",slug:"/reference/utilities",permalink:"/fetchtastic/docs/reference/utilities",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/utilities.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"types",permalink:"/fetchtastic/docs/reference/types"}},d={},a=[{value:"isHttpMethod",id:"ishttpmethod",level:2},{value:"StatusCodes",id:"statuscodes",level:2},{value:"isStatusCode",id:"isstatuscode",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"utilities",children:"Utilities"}),"\n",(0,n.jsx)(t.h2,{id:"ishttpmethod",children:"isHttpMethod"}),"\n",(0,n.jsxs)(t.p,{children:["Type guard. Returns ",(0,n.jsx)(t.code,{children:"true"})," if the given value is a valid ",(0,n.jsx)(t.code,{children:"HttpMethod"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"export function isHttpMethod(value: unknown): value is HttpMethod;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"isHttpMethod"})," function checks whether the provided value is a valid\n",(0,n.jsx)(t.code,{children:"HttpMethod"}),". It validates that the value is a string and matches one of the\npredefined ",(0,n.jsx)(t.code,{children:"HttpMethods"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"const result1 = isHttpMethod('GET'); // true\nconst result2 = isHttpMethod('INVALID'); // false\n"})}),"\n",(0,n.jsx)(t.h2,{id:"statuscodes",children:"StatusCodes"}),"\n",(0,n.jsx)(t.p,{children:"A readonly object of HTTP status codes and their corresponding descriptions."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"const StatusCodes = {\n  100: 'Continue',\n  101: 'Switching Protocols',\n  // ...\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"StatusCodes"})," map provides a mapping of HTTP status codes to their\ndescriptive phrases. It can be used to retrieve the description for a given\nstatus code."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"const description = StatusCodes[200];\nconsole.log(description); // Output: 'OK'\n"})}),"\n",(0,n.jsx)(t.h2,{id:"isstatuscode",children:"isStatusCode"}),"\n",(0,n.jsxs)(t.p,{children:["Type guard. Checks ifthe given input is a valid HTTP status code. The input is\nconsidered valid if it is a number and exists as a key in the ",(0,n.jsx)(t.code,{children:"StatusCodes"}),"\nobject."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"function isStatusCode(key: unknown): key is keyof typeof StatusCodes;\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},9252:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(7378);const i={},c=n.createContext(i);function o(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);